#!/usr/bin/python3

"""
== Лото ==

Правила игры в лото.

Игра ведется с помощью специальных карточек, на которых отмечены числа, 
и фишек (бочонков) с цифрами.

Количество бочонков — 90 штук (с цифрами от 1 до 90).

Каждая карточка содержит 3 строки по 9 клеток. В каждой строке по 5 случайных цифр, 
расположенных по возрастанию. Все цифры в карточке уникальны. Пример карточки:

--------------------------
    9 43 62          74 90
 2    27    75 78    82
   41 56 63     76      86 
--------------------------

В игре 2 игрока: пользователь и компьютер. Каждому в начале выдается 
случайная карточка. 

Каждый ход выбирается один случайный бочонок и выводится на экран.
Также выводятся карточка игрока и карточка компьютера.

Пользователю предлагается зачеркнуть цифру на карточке или продолжить.
Если игрок выбрал "зачеркнуть":
	Если цифра есть на карточке - она зачеркивается и игра продолжается.
	Если цифры на карточке нет - игрок проигрывает и игра завершается.
Если игрок выбрал "продолжить":
	Если цифра есть на карточке - игрок проигрывает и игра завершается.
	Если цифры на карточке нет - игра продолжается.
	
Побеждает тот, кто первый закроет все числа на своей карточке.

Пример одного хода:

Новый бочонок: 70 (осталось 76)
------ Ваша карточка -----
 6  7          49    57 58
   14 26     -    78    85
23 33    38    48    71   
--------------------------
-- Карточка компьютера ---
 7 11     - 14    87      
      16 49    55 77    88    
   15 20     -       76  -
--------------------------
Зачеркнуть цифру? (y/n)

Подсказка: каждый следующий случайный бочонок из мешка удобно получать 
с помощью функции-генератора.

Подсказка: для работы с псевдослучайными числами удобно использовать 
модуль random: http://docs.python.org/3/library/random.html

"""

import random
# import array
from array import *

# class Card:
#     lotto_card: array.array
#     pass

row_cnt = 3
col_cnt = 9

sorted_matrix = []
n = 0
max_num = 15
new_num: str
matrix = []
while n < max_num:
    new_num = '{:>2}'.format(random.randint(1,90))
    if matrix.count(new_num) == 0:
        matrix.append(new_num)
        n +=1

for i in range(row_cnt):
    n = max_num / row_cnt
    part_matrix = matrix[ int(i*n):int((i+1)*n)]
    part_matrix.sort()

    for i in range(4):
        part_matrix.insert(random.randint(0,len(part_matrix)), '  ')

    sorted_matrix = sorted_matrix + part_matrix

print (matrix)
print (sorted_matrix)

# "-----------------------------"
# "| {} {} {} {} {} {} {} {} {} |"
# "| {} {} {} {} {} {} {} {} {} |"
# "| {} {} {} {} {} {} {} {} {} |"
# "-----------------------------"

row_pattern =  "|" + " {}" * col_cnt + "|"
row_len = len(row_pattern)
row_line = "-" * row_len
rp = row_pattern + "\n"
rl = row_line + "\n"

full_pattern = rl + rp * 3 + rl

print(full_pattern.format(*sorted_matrix))

Что осталось:
- сделать класс "Карточка", содержащий
-- геттер (заполнитель) карточки, т.е. заполнение обычного списка. Алгоритм заполнения сделал выше.
-- метод для "вычеркивания" угаданных чисел. Реализуется поиском по списку и заменой найденного числа на '--'
-- интерфейс для вывода карточки, алгоритм сделал выше

- создать два списка
- запустить цикл от 1 до 90, в котором:
-- вызываю метод "вычеркивания" выпавшего числа
-- вызываю вывод на печать обоих карточек

